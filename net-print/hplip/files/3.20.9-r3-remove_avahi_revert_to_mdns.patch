diff -ur hplip-3.20.9/Makefile.am hplip-3.20.6/Makefile.am
--- hplip-3.20.9/Makefile.am	2020-09-23 07:24:21.000000000 +0200
+++ hplip-3.20.6/Makefile.am	2020-06-18 15:07:43.000000000 +0200
@@ -47,7 +47,7 @@
 hpdir = $(cupsbackenddir)
 hp_PROGRAMS = hp
 hp_SOURCES = prnt/backend/hp.c
-hp_LDADD = libhpmud.la libhpdiscovery.la $(DBUS_LIBS)
+hp_LDADD = libhpmud.la $(DBUS_LIBS)
 hp_LDFLAGS = $(libhpmud_la_LDFLAGS)
 hp_CFLAGS = $(DBUS_CFLAGS)
 endif #HPLIP_CLASS_DRIVER 
@@ -86,11 +86,10 @@
 # HP Service Discovery library
 if NETWORK_BUILD
 lib_LTLIBRARIES += libhpdiscovery.la
-#libhpdiscovery_la_SOURCES = protocol/discovery/mdns.c protocol/discovery/mdns.h
-libhpdiscovery_la_SOURCES = protocol/discovery/avahiDiscovery.c protocol/discovery/avahiDiscovery.h
-libhpdiscovery_la_CFLAGS  = -DCONFDIR=\"$(hplip_confdir)\" -I/usr/include/avahi-client -I/usr/include/avahi-core -I/usr/include/avahi-common $(DBUS_CFLAGS)
-libhpdiscovery_la_LDFLAGS = -version-info 0:1:0 -L$(libdir)
-libhpdiscovery_la_LIBADD  = -l$(SNMPLIB) -lcrypto -lavahi-client -lavahi-core -lavahi-common $(DBUS_LIBS)
+libhpdiscovery_la_SOURCES = protocol/discovery/mdns.c protocol/discovery/mdns.h
+libhpdiscovery_la_CFLAGS  = -DCONFDIR=\"$(hplip_confdir)\"
+libhpdiscovery_la_LDFLAGS = -version-info 0:1:0
+libhpdiscovery_la_LIBADD  = -l$(SNMPLIB) -lcrypto
 endif #NETWORK_BUILD
 
 
@@ -251,7 +250,7 @@
 # ptest
 noinst_PROGRAMS += ptest
 ptest_SOURCES = pcard/ptest.c pcard/ptest.h pcard/fat.c pcard/fat.h
-ptest_LDADD = libhpmud.la libhpdiscovery.la
+ptest_LDADD = libhpmud.la
 endif #!HPLIP_CLASS_DRIVER
 
 # data
diff -ur hplip-3.20.9/Makefile.in hplip-3.20.6/Makefile.in
--- hplip-3.20.9/Makefile.in	2020-09-23 07:26:03.000000000 +0200
+++ hplip-3.20.6/Makefile.in	2020-06-18 15:09:56.000000000 +0200
@@ -284,13 +284,10 @@
 libapdk_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(libapdk_la_CXXFLAGS) \
 	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
-am__DEPENDENCIES_1 =
-@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@libhpdiscovery_la_DEPENDENCIES =  \
-@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@	$(am__DEPENDENCIES_1)
-am__libhpdiscovery_la_SOURCES_DIST =  \
-	protocol/discovery/avahiDiscovery.c \
-	protocol/discovery/avahiDiscovery.h
-@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@am_libhpdiscovery_la_OBJECTS = libhpdiscovery_la-avahiDiscovery.lo
+libhpdiscovery_la_DEPENDENCIES =
+am__libhpdiscovery_la_SOURCES_DIST = protocol/discovery/mdns.c \
+	protocol/discovery/mdns.h
+@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@am_libhpdiscovery_la_OBJECTS = libhpdiscovery_la-mdns.lo
 libhpdiscovery_la_OBJECTS = $(am_libhpdiscovery_la_OBJECTS)
 libhpdiscovery_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) \
@@ -358,6 +355,7 @@
 	$(CFLAGS) $(libhpmud_la_LDFLAGS) $(LDFLAGS) -o $@
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@am_libhpmud_la_rpath =  \
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@	-rpath $(libdir)
+am__DEPENDENCIES_1 =
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@@SCAN_BUILD_TRUE@libsane_hpaio_la_DEPENDENCIES = libhpip.la \
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@@SCAN_BUILD_TRUE@	libhpmud.la \
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@@SCAN_BUILD_TRUE@	libhpipp.la \
@@ -442,7 +440,6 @@
 hp_OBJECTS = $(am_hp_OBJECTS)
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@hp_DEPENDENCIES =  \
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@	libhpmud.la \
-@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@	libhpdiscovery.la \
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@	$(am__DEPENDENCIES_1)
 hp_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
 	--mode=link $(CCLD) $(hp_CFLAGS) $(CFLAGS) $(hp_LDFLAGS) \
@@ -615,8 +612,7 @@
 @FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@am_ptest_OBJECTS = ptest.$(OBJEXT) \
 @FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@	fat.$(OBJEXT)
 ptest_OBJECTS = $(am_ptest_OBJECTS)
-@FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@ptest_DEPENDENCIES = libhpmud.la \
-@FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@	libhpdiscovery.la
+@FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@ptest_DEPENDENCIES = libhpmud.la
 am__dist_cmd_SCRIPTS_DIST = align.py info.py print.py toolbox.py \
 	clean.py colorcal.py unload.py testpage.py makeuri.py check.py \
 	fab.py levels.py sendfax.py setup.py makecopies.py probe.py \
@@ -4459,7 +4441,7 @@
 # hp backend.
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@hpdir = $(cupsbackenddir)
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@hp_SOURCES = prnt/backend/hp.c
-@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@hp_LDADD = libhpmud.la libhpdiscovery.la $(DBUS_LIBS)
+@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@hp_LDADD = libhpmud.la $(DBUS_LIBS)
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@hp_LDFLAGS = $(libhpmud_la_LDFLAGS)
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@hp_CFLAGS = $(DBUS_CFLAGS)
 # hpaio sane backend
@@ -4489,11 +4471,10 @@
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@@SCAN_BUILD_TRUE@libsane_hpaio_la_CFLAGS = $(DBUS_CFLAGS) \
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@@SCAN_BUILD_TRUE@	-Iprotocol \
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@@SCAN_BUILD_TRUE@	$(am__append_2)
-#libhpdiscovery_la_SOURCES = protocol/discovery/mdns.c protocol/discovery/mdns.h
-@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@libhpdiscovery_la_SOURCES = protocol/discovery/avahiDiscovery.c protocol/discovery/avahiDiscovery.h
-@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@libhpdiscovery_la_CFLAGS = -DCONFDIR=\"$(hplip_confdir)\" -I/usr/include/avahi-client -I/usr/include/avahi-core -I/usr/include/avahi-common $(DBUS_CFLAGS)
-@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@libhpdiscovery_la_LDFLAGS = -version-info 0:1:0 -L$(libdir)
-@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@libhpdiscovery_la_LIBADD = -l$(SNMPLIB) -lcrypto -lavahi-client -lavahi-core -lavahi-common $(DBUS_LIBS)
+@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@libhpdiscovery_la_SOURCES = protocol/discovery/mdns.c protocol/discovery/mdns.h
+@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@libhpdiscovery_la_CFLAGS = -DCONFDIR=\"$(hplip_confdir)\"
+@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@libhpdiscovery_la_LDFLAGS = -version-info 0:1:0
+@HPLIP_BUILD_TRUE@@NETWORK_BUILD_TRUE@libhpdiscovery_la_LIBADD = -l$(SNMPLIB) -lcrypto
 
 # hpmud library
 @HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@MUDNAME = hpmud
@@ -4616,7 +4597,7 @@
 @FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@selinuxdir = 
 @FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@dist_selinux_DATA = selinux/hplip.te selinux/hplip.fc selinux/hplip.pp selinux/hplip.if selinux/mypol.pp selinux/mypol.te
 @FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@ptest_SOURCES = pcard/ptest.c pcard/ptest.h pcard/fat.c pcard/fat.h
-@FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@ptest_LDADD = libhpmud.la libhpdiscovery.la
+@FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@@HPLIP_CLASS_DRIVER_FALSE@ptest_LDADD = libhpmud.la
 
 # data
 @FULL_BUILD_TRUE@@HPLIP_BUILD_TRUE@modelsdir = $(hplipdir)/data/models
@@ -5946,7 +5927,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libapdk_la-utils.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libapdk_la-version.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libapdk_la-versioncode.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libhpdiscovery_la-avahiDiscovery.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libhpdiscovery_la-mdns.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libhpipp_la-hp_ipp.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libhpmud_la-dot4.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libhpmud_la-hpmud.Plo@am__quote@
@@ -6072,12 +6053,12 @@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libapdk_la_CFLAGS) $(CFLAGS) -c -o libapdk_la-utils.lo `test -f 'common/utils.c' || echo '$(srcdir)/'`common/utils.c
 
-libhpdiscovery_la-avahiDiscovery.lo: protocol/discovery/avahiDiscovery.c
-@am__fastdepCC_TRUE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libhpdiscovery_la_CFLAGS) $(CFLAGS) -MT libhpdiscovery_la-avahiDiscovery.lo -MD -MP -MF $(DEPDIR)/libhpdiscovery_la-avahiDiscovery.Tpo -c -o libhpdiscovery_la-avahiDiscovery.lo `test -f 'protocol/discovery/avahiDiscovery.c' || echo '$(srcdir)/'`protocol/discovery/avahiDiscovery.c
-@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/libhpdiscovery_la-avahiDiscovery.Tpo $(DEPDIR)/libhpdiscovery_la-avahiDiscovery.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='protocol/discovery/avahiDiscovery.c' object='libhpdiscovery_la-avahiDiscovery.lo' libtool=yes @AMDEPBACKSLASH@
+libhpdiscovery_la-mdns.lo: protocol/discovery/mdns.c
+@am__fastdepCC_TRUE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libhpdiscovery_la_CFLAGS) $(CFLAGS) -MT libhpdiscovery_la-mdns.lo -MD -MP -MF $(DEPDIR)/libhpdiscovery_la-mdns.Tpo -c -o libhpdiscovery_la-mdns.lo `test -f 'protocol/discovery/mdns.c' || echo '$(srcdir)/'`protocol/discovery/mdns.c
+@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/libhpdiscovery_la-mdns.Tpo $(DEPDIR)/libhpdiscovery_la-mdns.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='protocol/discovery/mdns.c' object='libhpdiscovery_la-mdns.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libhpdiscovery_la_CFLAGS) $(CFLAGS) -c -o libhpdiscovery_la-avahiDiscovery.lo `test -f 'protocol/discovery/avahiDiscovery.c' || echo '$(srcdir)/'`protocol/discovery/avahiDiscovery.c
+@am__fastdepCC_FALSE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libhpdiscovery_la_CFLAGS) $(CFLAGS) -c -o libhpdiscovery_la-mdns.lo `test -f 'protocol/discovery/mdns.c' || echo '$(srcdir)/'`protocol/discovery/mdns.c
 
 xconvolve.lo: ip/xconvolve.c
 @am__fastdepCC_TRUE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT xconvolve.lo -MD -MP -MF $(DEPDIR)/xconvolve.Tpo -c -o xconvolve.lo `test -f 'ip/xconvolve.c' || echo '$(srcdir)/'`ip/xconvolve.c
diff -ur hplip-3.20.9/installer/core_install.py hplip-3.20.6/installer/core_install.py
--- hplip-3.20.9/installer/core_install.py	2020-09-23 07:24:10.000000000 +0200
+++ hplip-3.20.6/installer/core_install.py	2020-06-18 15:07:32.000000000 +0200
@@ -200,7 +200,6 @@
 QT_STR = "Python-Qt"
 EPM_STR = "Build Debian Package"
 AUTOMAKE_STR = "Build Driver"
-LIB_AVAHI="libavahi-dev"
 
 APPARMOR_DIR = "/etc/apparmor.d"
 SELINUX_DIR = "/etc/selinux/targeted/policy/policy*"
@@ -303,7 +302,6 @@
             'package_arch': TYPE_LIST,
             'open_mdns_port': TYPE_LIST,  # command to use to open mdns multicast port 5353
             'libdir_path': TYPE_STRING,
-            'hp_libs_remove_cmd': TYPE_STRING,
         }
 
         # components
@@ -379,7 +377,6 @@
             # Required scan packages
             'sane':            (True,  ['scan'], SANE_STR, self.check_sane, DEPENDENCY_RUN_TIME, '-', 'sane-config --version', GENERALDEP),
             'sane-devel':      (True,  ['scan'], SANE_DEV_STR, self.check_sane_devel, DEPENDENCY_COMPILE_TIME, '-', 'sane-config --version', GENERALDEP),
-            'libavahi-dev':    (True,  ['scan'], LIB_AVAHI, self.check_libavahi_dev, DEPENDENCY_RUN_AND_COMPILE_TIME, '-', 'FUNC#check_libavahi_dev', GENERALDEP),
             #'tesseract':       (True, ['scan'], TESS_STR, self.check_tesseract, DEPENDENCY_RUN_TIME, '-', 'tesseract --version', GENERALDEP),
            
             #'zbar':            (True, ['scan'], ZBAR_STR, self.check_zbar, DEPENDENCY_RUN_TIME, '-', None, GENERALDEP),
@@ -1248,11 +1245,6 @@
         # TODO: Compute these paths some way or another...
         return check_file('media.defs', "/usr/share/cups/ppdc/")
 
-    def check_libavahi_dev(self):
-        log.debug("Checking for libavahi-dev")
-        # TODO: Compute these paths some way or another...
-        return check_file('client.h', "/usr/include/avahi-client")
-
     def check_policykit(self):
         log.debug("Checking for PolicyKit...")
         if check_file('PolicyKit.conf', "/etc/PolicyKit") and check_file('org.gnome.PolicyKit.AuthorizationManager.service', "/usr/share/dbus-1/services"):
@@ -1873,25 +1865,6 @@
 
         else:
             return False
-    def remove_default_hplip_libs(self, callback=None, distro_ver=None):
-        hp_lib_rm_cmd = self.get_distro_ver_data('hp_libs_remove_cmd', None, distro_ver)
-        log.debug(hp_lib_rm_cmd)
-        print(hp_lib_rm_cmd)
-        if hp_lib_rm_cmd:
-            x = 1
-            #for cmd in hp_lib_rm_cmd:
-            status, output = utils.run(hp_lib_rm_cmd, self.passwordObj)
-            if any(['yum' in hp_lib_rm_cmd,'zypper' in hp_lib_rm_cmd, 'dnf' in hp_lib_rm_cmd, 'pacman' in hp_lib_rm_cmd]):
-                if status == 1:
-                    log.warn("An error occurred running '%s'" % hp_lib_rm_cmd)
-            else:
-                if status != 0:
-                    log.warn("An error occurred running '%s'" % hp_lib_rm_cmd)
-
-            if callback is not None:
-                callback(hp_lib_rm_cmd, " hp_libs_remove step %d" % x)
-
-            x += 1
 
     def run_pre_depend(self, callback=None, distro_ver=None):
         pre_cmd = self.get_distro_ver_data('pre_depend_cmd', None, distro_ver)
diff -ur hplip-3.20.9/io/hpmud/hpmud.c hplip-3.20.6/io/hpmud/hpmud.c
--- hplip-3.20.9/io/hpmud/hpmud.c	2020-09-23 07:24:10.000000000 +0200
+++ hplip-3.20.6/io/hpmud/hpmud.c	2020-06-18 15:07:36.000000000 +0200
@@ -506,10 +506,10 @@
    if (zc)
    {
 #ifdef HAVE_LIBNETSNMP
-    if (avahi_lookup(p) != AVAHI_STATUS_OK)
+    if (mdns_lookup(p, ip) != MDNS_STATUS_OK)
         return 0;
-    for (i=0; (ipAddressBuff[i] != 0) && (i < buf_size); i++)
-        buf[i] = ipAddressBuff[i];
+    for (i=0; (ip[i] != 0) && (i < buf_size); i++)
+        buf[i] = ip[i];
 #else
       return 0;
 #endif
diff -ur hplip-3.20.9/io/hpmud/hpmudi.h hplip-3.20.6/io/hpmud/hpmudi.h
--- hplip-3.20.9/io/hpmud/hpmudi.h	2020-09-23 07:24:10.000000000 +0200
+++ hplip-3.20.6/io/hpmud/hpmudi.h	2020-06-18 15:07:36.000000000 +0200
@@ -52,8 +52,7 @@
 #include "pml.h"
 #ifdef HAVE_LIBNETSNMP
 #include "jd.h"
-//#include "mdns.h"
-#include "avahiDiscovery.h"
+#include "mdns.h"
 #endif
 #ifdef HAVE_PPORT
 #include "pp.h"
diff -ur hplip-3.20.9/io/hpmud/jd.c hplip-3.20.6/io/hpmud/jd.c
--- hplip-3.20.9/io/hpmud/jd.c	2020-09-23 07:24:10.000000000 +0200
+++ hplip-3.20.6/io/hpmud/jd.c	2020-06-18 15:07:36.000000000 +0200
@@ -773,7 +773,7 @@
       goto bugout;
    }
 
-   if (avahi_lookup(host) != AVAHI_STATUS_OK)
+   if (mdns_lookup(host, ip) != MDNS_STATUS_OK)
    {
       BUG("invalid host %s, check firewall UDP/5353 or try using IP\n", host);
       stat = HPMUD_R_INVALID_MDNS;
diff -ur hplip-3.20.9/io/mudext/hpmudext.c hplip-3.20.6/io/mudext/hpmudext.c
--- hplip-3.20.9/io/mudext/hpmudext.c	2020-09-23 07:24:10.000000000 +0200
+++ hplip-3.20.6/io/mudext/hpmudext.c	2020-06-18 15:07:36.000000000 +0200
@@ -344,12 +344,12 @@
 
     Py_BEGIN_ALLOW_THREADS
 
-    if(avahi_lookup(hn) != AVAHI_STATUS_OK)
+    if(mdns_lookup(hn, ip) != MDNS_STATUS_OK)
         result =  HPMUD_R_INVALID_MDNS;
 
     Py_END_ALLOW_THREADS
 
-    return Py_BuildValue("(is)", result, ipAddressBuff);
+    return Py_BuildValue("(is)", result, ip);
 }
 #else
 static PyObject *get_zc_ip_address(PyObject *self, PyObject *args)
Only in hplip-3.20.9/protocol/discovery: avahiDiscovery.c
Only in hplip-3.20.9/protocol/discovery: avahiDiscovery.h
diff -ur --unidirectional-new-file hplip-3.20.9/protocol/discovery/mdns.c hplip-3.20.6/protocol/discovery/mdns.c
--- hplip-3.20.9/protocol/discovery/mdns.c	1970-01-01 01:00:00.000000000 +0100
+++ hplip-3.20.6/protocol/discovery/mdns.c	2020-06-18 15:07:43.000000000 +0200
@@ -0,0 +1,496 @@
+/*****************************************************************************
+ mdns.c - mDNS related calls
+ 
+ (c) 2015 Copyright HP Development Company, LP
+
+ Permission is hereby granted, free of charge, to any person obtaining a copy
+ of this software and associated documentation files (the "Software"), to deal
+ in the Software without restriction, including without limitation the rights
+ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
+ of the Software, and to permit persons to whom the Software is furnished to do
+ so, subject to the following conditions:
+
+ The above copyright notice and this permission notice shall be included in all
+ copies or substantial portions of the Software.
+
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ Client/Server generic message format (see messaging-protocol.doc):
+
+ Author: Sanjay Kumar
+ \*****************************************************************************/
+
+#include <stdio.h>
+#include <string.h>
+#include <syslog.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <netdb.h>
+#include <arpa/inet.h>
+#include "mdns.h"
+
+/* Convert "www.google.com" to "3www6google3com". */
+static int mdns_convert_name_to_dns(const char *name, int name_size, char *dns_name)
+{
+    int i, x = 0;
+    char *p = dns_name;
+
+    if (name == 0 || name[0] == 0)
+        return 0;
+
+    for (i = 0; i < name_size && name[i]; i++)
+    {
+        if (name[i] == '.')
+        {
+            *p++ = i - x; /* length */
+            for (; x < i; x++)
+                *p++ = name[x];
+            x++;
+        }
+    }
+
+    if (i)
+    {
+        *p++ = i - x; /* length */
+        for (; x < i; x++)
+            *p++ = name[x];
+        x++;
+    }
+
+    p[x++] = 0;
+
+    return x; /* return length DOES include null termination */
+}
+
+
+static int mdns_open_socket(int *psocket)
+{
+    int stat = MDNS_STATUS_ERROR;
+    int udp_socket = -1, yes = 1;
+    char loop = 0, ttl = 255;
+    struct sockaddr_in recv_addr , addr;
+    struct ip_mreq mreq;
+
+    DBG("mdns_open_socket entry.\n");
+
+    if ((udp_socket = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
+    {
+        BUG("unable to create udp socket: %m\n");
+        goto bugout;
+    }
+
+    /* Get rid of "address already in use" error message. */
+    if (setsockopt(udp_socket, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1)
+    {
+        BUG("unable to setsockopt: %m\n");
+        goto bugout;
+    }
+
+    /* Bind the socket to port and IP equal to INADDR_ANY. */
+    bzero(&recv_addr, sizeof(recv_addr));
+    recv_addr.sin_family = AF_INET;
+    recv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
+    recv_addr.sin_port = htons(5353);
+    if (bind(udp_socket, (struct sockaddr *) &recv_addr, sizeof(recv_addr)) == -1)
+    {
+        BUG("unable to bind udp socket: %m\n");
+        goto bugout;
+    }
+
+    /* Set multicast loopback off. */
+    if (setsockopt(udp_socket, IPPROTO_IP, IP_MULTICAST_LOOP, &loop, sizeof(loop)) == -1)
+    {
+        BUG("unable to setsockopt: %m\n");
+        goto bugout;
+    }
+
+    /* Set ttl to 255. Required by mdns. */
+    if (setsockopt(udp_socket, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl))== -1)
+    {
+        BUG("unable to setsockopt: %m\n");
+        goto bugout;
+    }
+
+    /* Join the .local multicast group */
+    mreq.imr_multiaddr.s_addr = inet_addr("224.0.0.251");
+    mreq.imr_interface.s_addr = htonl(INADDR_ANY);
+    if (setsockopt(udp_socket, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(struct ip_mreq)) == -1) {
+        BUG("unable to add to multicast group: %m\n");
+        close(udp_socket);
+        goto bugout;
+    }
+
+    *psocket = udp_socket;
+    DBG("pSocket = [%d]: %m\n", *psocket);
+    stat = MDNS_STATUS_OK;
+
+bugout:
+    return stat;
+}
+
+static void mdns_create_query_packet(char* fqdn, int query_type, char* querybuf, int *length)
+{
+    int n = 0;
+    char header[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
+                                                             // ID/FLAGS/QDCNT/ANCNT/NSCNT/ARCNT
+
+    DBG("mdns_create_query_packet.\n");
+    memcpy(querybuf, header, sizeof(header));
+    n = sizeof(header);
+
+    n += mdns_convert_name_to_dns(fqdn, strlen(fqdn), querybuf + n);
+    querybuf[n++] = 0x00;
+    querybuf[n++] = query_type;
+    querybuf[n++] = 0x00;
+    querybuf[n++] = QCLASS_IN;
+
+    //DBG_DUMP(dnsquery, n);
+    *length = n;
+}
+
+static int mdns_send_query(int udp_socket, char *fqdn, int query_type)
+{
+    char querybuf[256] = {0,};
+    int length = 0;
+    int stat = MDNS_STATUS_OK;
+    struct sockaddr_in send_addr;
+
+    DBG("mdns_send_query entry.  send socket=%d len=%d\n", udp_socket, length);
+
+    mdns_create_query_packet(fqdn, query_type, querybuf, &length);
+
+    bzero(&send_addr, sizeof(send_addr));
+    send_addr.sin_family = AF_INET;
+    send_addr.sin_addr.s_addr = inet_addr("224.0.0.251");
+    send_addr.sin_port = htons(5353);
+    if (sendto(udp_socket, querybuf, length, 0, (struct sockaddr *) &send_addr, sizeof(send_addr)) < 0)
+        stat = MDNS_STATUS_ERROR;
+
+    DBG("mdns_send_query returning with status(%d)...\n", stat);
+    return stat;
+}
+
+static int mdns_readName(unsigned char* start, unsigned char *Response, char *buf)
+{
+    int size = 0;
+    char *name = buf;
+    unsigned char *p = Response;
+
+    while (size = *p++)
+    {
+        if (size >= 0xC0)
+        {
+            //Compressed Size. Just ignore it.
+            p++; //skip Offset byte
+            return (p - Response);
+        }
+        memcpy(name, p, size);
+        name[size] = '.';
+        p += size;
+        name += size + 1;
+    }
+
+    *(name - 1) = '\0';
+
+    DBG("Name = [%s]\n", buf);
+    return (p - Response);
+}
+
+
+static unsigned char* mdns_readMDL(unsigned char *p, unsigned char *normalized_mdl, int len)
+{
+    int i = 0;
+    int j = 0;
+    int z = 0;
+    int size = 0;
+
+    unsigned char* mdl = normalized_mdl;
+    while (i < len)
+    {
+        size = *p++;
+        i += size + 1;
+
+        if (strncmp(p, "mdl=", 4) == 0)
+        {
+           z = 4;
+        }
+        else if (strncmp(p, "ty=", 3) == 0)
+        {
+           z = 3+3;
+        }
+	
+	if(z > 0)
+        {
+            for (j = z; j < size; j++)
+            {
+                if (*(p + j) == ' ')
+                    *mdl++ = '_'; //Replace white space with underscore
+                else
+                    *mdl++ = tolower(*(p + j));
+            }
+
+            *mdl++ = '\0';
+            break;
+        }
+        p += size;
+
+    }
+    DBG("MDL = [%s]\n", normalized_mdl);
+    return p + 4;
+}
+
+static void mdns_read_header(char *Response, DNS_PKT_HEADER *h)
+{
+    h->id          =   Response[0] << 8 | Response[1];
+    h->flags       =   Response[2] << 8 | Response[3];
+    h->questions   =   Response[4] << 8 | Response[5];
+    h->answers     =   Response[6] << 8 | Response[7];
+    h->authorities =   Response[8] << 8 | Response[9];
+    h->additionals =   Response[10]<< 8 | Response[11];
+
+    DBG("ID=%x flags=%x Q=%x A=%x AUTH=%x ADD=%x\n", h->id, h->flags, h->questions,
+            h->answers, h->authorities, h->additionals);
+
+}
+
+static void mdns_parse_respponse(unsigned char *Response, DNS_RECORD *rr)
+{
+    unsigned char *p = Response;
+    unsigned short type = 0, data_len = 0;
+    DNS_PKT_HEADER h;
+    int i = 0;
+
+    DBG("mdns_parse_respponse entry.\n");
+    mdns_read_header(Response, &h);
+    p += MDNS_HEADER_SIZE;
+
+    for (i = 0; i < h.questions; i++)
+    {
+        p += mdns_readName(Response, p, rr->name);
+        p += 4; //Skip TYPE(2 bytes)/CLASS(2 bytes)
+    }
+
+    for (i = 0; i < (h.answers + h.additionals); i++)
+    {
+        p += mdns_readName(Response, p, rr->name);
+        type = (*p << 8  | *(p+1));
+        p += 8;  //Skip type(2 bytes)/class(2 bytes)/TTL(4 bytes)
+
+        data_len = ( *p << 8  | *(p+1));
+        p += 2;  //Skip data_len(2 bytes)
+
+        switch (type)
+        {
+            case QTYPE_A:
+                sprintf(rr->ip, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
+                break;
+            case QTYPE_TXT:
+                mdns_readMDL(p, rr->mdl, data_len);
+                break;
+            default:
+                break;
+        }
+
+        p += data_len;
+        //DBG("TYPE = %d, Length = %d\n",type, data_len);
+    }
+
+    DBG("mdns_parse_respponse returning MDL = %s, IP = %s\n",rr->mdl, rr->ip);
+}
+
+static int mdns_read_single_response(int udp_socket, char *recvbuffer, int recvbufsize)
+{
+    struct timeval tmo;
+    struct sockaddr_in addr;
+    socklen_t addrlen = sizeof(addr);
+    fd_set master, readfd;
+    int len = 0, maxfd = 0, ret = 0;
+
+    DBG("mdns_read_single_response.\n");
+    FD_ZERO(&master);
+    FD_SET(udp_socket, &master);
+    maxfd = udp_socket;
+    tmo.tv_sec = 0;
+    tmo.tv_usec = 300000;
+
+    readfd = master;
+    ret = select(maxfd + 1, &readfd, NULL, NULL, &tmo);
+    if (ret > 0)
+    {
+        bzero(&addr, sizeof(addr));
+        if ((len = recvfrom(udp_socket, recvbuffer, recvbufsize, 0, (struct sockaddr *) &addr, &addrlen)) < 0)
+        {
+            BUG("recvfrom error: (%m)\n");
+            ret = -1;
+        }
+    }
+
+    DBG("mdns_read_single_response exiting with ret = %d\n", ret);
+    return ret;
+}
+
+static DNS_RECORD *mdns_read_responses(int udp_socket, int mode)
+{
+    int retries = 3, ret = 0;
+    char recvbuffer[MAX_MDNS_RESPONSE_LEN] =  { 0, };
+    DNS_RECORD *rr = NULL, *head = NULL, *temp = NULL;
+
+    DBG("mdns_read_responses.\n");
+    while (1 )
+    {
+        memset(recvbuffer, 0, sizeof(recvbuffer));
+        ret = mdns_read_single_response(udp_socket, recvbuffer, sizeof(recvbuffer));
+        if (ret <= 0)
+        {
+            if (ret == 0 && retries--)     //READ TIMEOUT. Retry few more times.
+                continue;
+            else
+                break;
+        }
+        else
+        {
+            temp = (DNS_RECORD *)malloc(sizeof(DNS_RECORD));
+            if(temp)
+            {
+                temp->next = NULL;
+                if(head == NULL)
+                    rr = head = temp;
+                else
+                {
+                    rr->next = temp;
+                    rr = rr->next;
+                }
+
+                memset(rr, 0, sizeof(DNS_RECORD));
+                mdns_parse_respponse(recvbuffer, rr);
+
+                if(mode == MODE_READ_SINGLE)
+                    break;
+            }
+        }
+    } // while(1)
+
+    DBG("mdns_read_responses returning with (%p).\n", head);
+    return head;
+}
+
+static int mdns_update_uris(DNS_RECORD *rr, char* uris_buf, int buf_size, int *count)
+{
+    char tempuri[MAX_URI_LEN] = {0};
+    int bytes_read = 0;
+
+    DBG("mdns_update_uris.\n");
+
+    *count = 0;
+    memset(uris_buf, 0, buf_size);
+
+    while(rr)
+    {
+        if (rr->mdl[0] && rr->ip[0] /*&& strstr(rr->mdl, "scanjet")*/)
+        {
+            memset(tempuri, 0, sizeof(tempuri));
+            sprintf(tempuri, "hp:/net/%s?ip=%s&queue=false", rr->mdl, rr->ip);
+
+            //Check whether buffer has enough space to add new URI and check for duplicate URIs.
+            if(bytes_read + sizeof(tempuri) < buf_size  && !strstr(uris_buf, tempuri))
+            {
+                bytes_read += sprintf(uris_buf + bytes_read, "%s;", tempuri);
+                (*count)++;
+                *(uris_buf + bytes_read) = '\0';
+            }
+        }
+        rr = rr->next;
+    }
+
+    DBG("mdns_update_uris Count=[%d] bytes=[%d] URIs = %s\n",*count, bytes_read, uris_buf);
+    return bytes_read;
+}
+
+static void mdns_rr_cleanup(DNS_RECORD *rr)
+{
+    DNS_RECORD *temp = NULL;
+
+    DBG("mdns_rr_cleanup entry.\n");
+    while(rr)
+    {
+        temp = rr->next;
+        free(rr);
+        rr = temp;
+    }
+}
+
+int mdns_probe_nw_scanners(char* uris_buf, int buf_size, int *count)
+{
+    int n = 0, bytes_read = 0;
+    int udp_socket = 0;
+    int stat = MDNS_STATUS_ERROR;
+    DNS_RECORD *rr_list = NULL;
+
+    DBG("mdns_probe_nw_scanners entry.\n");
+    /* Open UDP socket */
+    if (mdns_open_socket(&udp_socket) != MDNS_STATUS_OK)
+        goto bugout;
+
+    /* Send dns query */
+    mdns_send_query(udp_socket, "_scanner._tcp.local", QTYPE_PTR);
+    mdns_send_query(udp_socket, "_uscan._tcp.local", QTYPE_PTR);
+
+    /* Read Responses */
+    rr_list = mdns_read_responses(udp_socket, MODE_READ_ALL);
+
+    /* Update URIs buffer */
+    bytes_read = mdns_update_uris(rr_list, uris_buf, buf_size, count);
+    DBG("mdns_probe_nw_scanners returned with bytes_read = [%d].\n",bytes_read);
+
+bugout:
+    if (udp_socket >= 0)
+        close(udp_socket);
+
+    mdns_rr_cleanup(rr_list);
+
+    return bytes_read;
+}
+
+/*
+ * Lookup IP for MDNS host name.
+ * MDNS host name example: "npi7c8a3e" (LaserJet p2055dn)
+ */
+int mdns_lookup(char* hostname, unsigned char* ip)
+{
+    int udp_socket = 0;
+    int stat = MDNS_STATUS_ERROR;
+    char fqdn[MAX_NAME_LENGTH] = {0};
+    DNS_RECORD *rr_list = NULL;
+
+    DBG("mdns_probe_nw_scanners entry.\n");
+    /* Open UDP socket */
+    if (mdns_open_socket(&udp_socket) != MDNS_STATUS_OK)
+        goto bugout;
+
+    /* Send dns query */
+    sprintf(fqdn, "%s.local", hostname);
+    mdns_send_query(udp_socket, fqdn, QTYPE_A);
+
+    /* Read Responses */
+    rr_list = mdns_read_responses(udp_socket, MODE_READ_SINGLE);
+
+    /* Update IP Address buffer */
+    if(rr_list)
+    {
+        strcpy(ip, rr_list->ip);
+        stat = MDNS_STATUS_OK;
+        DBG("IP = [%s].\n",ip);
+    }
+
+bugout:
+    if (udp_socket >= 0)
+        close(udp_socket);
+
+    mdns_rr_cleanup(rr_list);
+    return stat;
+}
+
diff -ur --unidirectional-new-file hplip-3.20.9/protocol/discovery/mdns.h hplip-3.20.6/protocol/discovery/mdns.h
--- hplip-3.20.9/protocol/discovery/mdns.h	1970-01-01 01:00:00.000000000 +0100
+++ hplip-3.20.6/protocol/discovery/mdns.h	2020-06-18 15:07:43.000000000 +0200
@@ -0,0 +1,104 @@
+/*****************************************************************************\
+
+  mdns.h - mDNS related calls 
+ 
+  (c) 2015 Copyright HP Development Company, LP
+
+  Permission is hereby granted, free of charge, to any person obtaining a copy 
+  of this software and associated documentation files (the "Software"), to deal 
+  in the Software without restriction, including without limitation the rights 
+  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
+  of the Software, and to permit persons to whom the Software is furnished to do 
+  so, subject to the following conditions:
+
+  The above copyright notice and this permission notice shall be included in all
+  copies or substantial portions of the Software.
+
+  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
+  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
+  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
+  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
+  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
+  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+  Client/Server generic message format (see messaging-protocol.doc):
+
+  Author: Sanjay Kumar
+\*****************************************************************************/
+
+#ifndef _DISCOVERY_MDNS_H
+#define _DISCOVERY_MDNS_H
+
+//MDNS Packet fields
+#define QTYPE_A     1
+#define QTYPE_TXT  16
+#define QTYPE_SRV  33
+#define QTYPE_AAAA 28
+#define QTYPE_PTR  12
+#define QCLASS_IN   1
+#define MDNS_HEADER_SIZE  12
+
+//Error Codes
+#define MDNS_STATUS_OK 0
+#define MDNS_STATUS_ERROR 1
+#define MDNS_STATUS_TIMEOUT 2
+
+#define MAX_IP_ADDR_LEN 16
+#define MAX_URI_LEN 256
+#define MAX_MDL_NAME_LEN 256
+#define MAX_NAME_LENGTH 256
+#define MAX_MDNS_RESPONSE_LEN 2048
+#define MODE_READ_ALL 0
+#define MODE_READ_SINGLE 1
+
+/*Relevant MDNS Resource Record(RR) fields */
+typedef struct _DNS_RECORD
+{
+    char ip[MAX_IP_ADDR_LEN];
+    char mdl[MAX_MDL_NAME_LEN];
+    char name[MAX_MDL_NAME_LEN];
+    struct _DNS_RECORD *next;
+}DNS_RECORD;
+
+typedef struct _DNS_PKT_HEADER
+{
+    unsigned short  id;
+    unsigned short  flags;
+    unsigned short  questions;
+    unsigned short  answers;
+    unsigned short  authorities;
+    unsigned short  additionals;
+}DNS_PKT_HEADER;
+
+
+//#define MDNS_DEBUG
+
+#define _STRINGIZE(x) #x
+#define STRINGIZE(x) _STRINGIZE(x)
+
+#define BUG(args...) syslog(LOG_ERR, __FILE__ " " STRINGIZE(__LINE__) ": " args)
+#ifdef MDNS_DEBUG
+   #define DBG(args...) syslog(LOG_INFO, __FILE__ " " STRINGIZE(__LINE__) ": " args)
+#else
+   #define DBG(args...)
+#endif
+
+/*Function Prototypes*/
+int   mdns_probe_nw_scanners(char* buf, int buf_size, int *count);
+int   mdns_lookup(char* hostname, unsigned char* ip);
+
+
+/*Helper Function Prototypes*/
+static int   mdns_convert_name_to_dns(const char *name, int name_size, char *dns_name);
+static int   mdns_read_single_response(int udp_socket, char *recvbuffer, int recvbufsize);
+static int   mdns_open_socket(int *psocket);
+static int   mdns_send_query(int udp_socket, char *fqdn, int query_type);
+static int   mdns_readName(unsigned char* start, unsigned char *p, char *buf);
+static int   mdns_update_uris(DNS_RECORD *rr, char* uris_buf, int buf_size, int *count);
+static void  mdns_create_query_packet(char* fqdn, int query_type, char* dnsquery, int *length);
+static void  mdns_read_header(char *Response, DNS_PKT_HEADER *h);
+static void  mdns_parse_respponse(unsigned char *Response, DNS_RECORD *rr);
+static void  mdns_rr_cleanup(DNS_RECORD *rr);
+static DNS_RECORD *mdns_read_responses(int udp_socket, int mode);
+static unsigned char* mdns_readMDL(unsigned char *p, unsigned char *normalized_mdl, int len);
+#endif // _DISCOVERY_MDNS_H
+
diff -ur hplip-3.20.9/scan/sane/hpaio.c hplip-3.20.6/scan/sane/hpaio.c
--- hplip-3.20.9/scan/sane/hpaio.c	2020-09-23 07:24:20.000000000 +0200
+++ hplip-3.20.6/scan/sane/hpaio.c	2020-06-18 15:07:36.000000000 +0200
@@ -36,7 +36,6 @@
 #include <cups/cups.h>
 #include "hpmud.h"
 #ifdef HAVE_LIBNETSNMP
-#include "avahiDiscovery.h"
 #endif
 #include "hp_ipp.h"
 #include "soap.h"
@@ -304,7 +303,7 @@
         GetUriLine(tail, uri, &tail);
         total += AddDevice(uri);
     }
-    //memset(message, 0, sizeof(message));
+    memset(message, 0, sizeof(message));
     /* Look for Network Scan devices if localonly flag if FALSE. */
     if (!localOnly)
     {   
@@ -319,17 +318,12 @@
             free(cups_printer);
 #ifdef HAVE_LIBNETSNMP
         /* Discover NW scanners using Bonjour*/
-        //bytes_read = avahi_probe_nw_scanners();
-        if( (avahi_probe_nw_scanners() == AVAHI_STATUS_OK) && (aUriBuf != NULL) )
-        {           
-          token = strtok(aUriBuf, ";");
-          while (token)
-          {
-              total += AddDevice(token);
-              token = strtok(NULL, ";");
-          }
-          free(aUriBuf);
-          aUriBuf = NULL;
+        bytes_read = mdns_probe_nw_scanners(message, sizeof(message), &cnt);
+        token = strtok(message, ";");
+        while (token)
+        {
+            total += AddDevice(token);
+            token = strtok(NULL, ";");
         }
 #endif
         if(!total)
