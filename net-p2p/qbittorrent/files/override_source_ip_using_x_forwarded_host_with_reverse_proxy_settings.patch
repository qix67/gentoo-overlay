diff -ur qBittorrent-release-4.2.2.org/src/base/http/connection.cpp qBittorrent-release-4.2.2/src/base/http/connection.cpp
--- qBittorrent-release-4.2.2.org/src/base/http/connection.cpp	2020-03-24 15:39:31.000000000 +0100
+++ qBittorrent-release-4.2.2/src/base/http/connection.cpp	2020-04-01 08:08:49.904214765 +0200
@@ -33,6 +33,7 @@
 #include <QTcpSocket>
 
 #include "base/logger.h"
+#include "base/preferences.h"
 #include "irequesthandler.h"
 #include "requestparser.h"
 #include "responsegenerator.h"
@@ -91,7 +92,7 @@
             return;
 
         case RequestParser::ParseStatus::OK: {
-                const Environment env {m_socket->localAddress(), m_socket->localPort(), m_socket->peerAddress(), m_socket->peerPort()};
+                const Environment env {m_socket->localAddress(), m_socket->localPort(), resolvePeerAddress(result.request), m_socket->peerPort()};
 
                 Response resp = m_requestHandler->processRequest(result.request, env);
 
@@ -168,3 +169,107 @@
 
     return false;
 }
+
+QHostAddress Connection::resolvePeerAddress(const Http::Request &request)
+{
+    QString reverseProxyAddressString = Preferences::instance()->getReverseProxyAddress();
+    QHostAddress peerAddress = m_socket->peerAddress();
+    QHostAddress reverseProxyAddress;
+
+    // Only reverse proxy can overwrite peer address
+    if (reverseProxyAddress.setAddress(reverseProxyAddressString) && peerAddress.isEqual(reverseProxyAddress)) {
+        QString forwardedFor = request.headers.value(Http::HEADER_X_FORWARDED_FOR);
+
+        if (!forwardedFor.isEmpty()) {
+            // peer address is the 1st global IP in X-Forwarded-For or, if none available, the 1st IP in the list
+            QStringList remoteIpList = forwardedFor.split(",");
+            bool hasGlobalIp = false;
+
+            foreach (const QString &remoteIp, remoteIpList) {
+                if (peerAddress.setAddress(remoteIp) && isGlobal(peerAddress)) {
+                    hasGlobalIp = true;
+                    break;
+                }
+            }
+
+            if (!hasGlobalIp)
+                peerAddress.setAddress(remoteIpList.at(0));
+        }
+    }
+
+    return peerAddress;
+}
+
+bool Connection::isGlobal(const QHostAddress ip)
+{
+#if QT_VERSION < QT_VERSION_CHECK(5, 11, 0)
+    // check IP against IPv4 special addresses
+    if (ip.isInSubnet(QHostAddress("10.0.0.0"), 8))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("100.64.0.0"), 10))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("127.0.0.0"), 8))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("169.254.0.0"), 16))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("172.16.0.0"), 12))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("192.0.0.0"), 24))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("192.0.2.0"), 24))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("192.88.99.0"), 24))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("192.168.0.0"), 16))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("198.18.0.0"), 15))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("198.51.100.0"), 24))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("203.0.113.0"), 24))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("224.0.0.0"), 4))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("240.0.0.0"), 4))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("255.255.255.255"), 32))
+        return false;
+
+    // check IP against IPv6 special addresses
+    if (ip.isInSubnet(QHostAddress("::1"), 128))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("100::"), 64))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("2001:db8::"), 32))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("fc00::"), 7))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("fe80::"), 10))
+        return false;
+
+    if (ip.isInSubnet(QHostAddress("ff00::"), 8))
+        return false;
+
+    return true;
+#else
+    return ip.isGlobal();
+#endif
+}
diff -ur qBittorrent-release-4.2.2.org/src/base/http/connection.h qBittorrent-release-4.2.2/src/base/http/connection.h
--- qBittorrent-release-4.2.2.org/src/base/http/connection.h	2020-03-24 15:39:31.000000000 +0100
+++ qBittorrent-release-4.2.2/src/base/http/connection.h	2020-04-01 08:08:49.904214765 +0200
@@ -33,6 +33,8 @@
 
 #include <QElapsedTimer>
 #include <QObject>
+#include <QHostAddress>
+#include "irequesthandler.h"
 
 class QTcpSocket;
 
@@ -59,6 +61,9 @@
     private:
         static bool acceptsGzipEncoding(QString codings);
         void sendResponse(const Response &response) const;
+        QHostAddress resolvePeerAddress(const Http::Request &request);
+
+        bool isGlobal(const QHostAddress ip);
 
         QTcpSocket *m_socket;
         IRequestHandler *m_requestHandler;
Only in qBittorrent-release-4.2.2/src/base/http: connection.h.orig
diff -ur qBittorrent-release-4.2.2.org/src/base/http/types.h qBittorrent-release-4.2.2/src/base/http/types.h
--- qBittorrent-release-4.2.2.org/src/base/http/types.h	2020-03-24 15:39:31.000000000 +0100
+++ qBittorrent-release-4.2.2/src/base/http/types.h	2020-04-01 08:08:49.904214765 +0200
@@ -56,6 +56,7 @@
     const char HEADER_SET_COOKIE[] = "set-cookie";
     const char HEADER_X_CONTENT_TYPE_OPTIONS[] = "x-content-type-options";
     const char HEADER_X_FORWARDED_HOST[] = "x-forwarded-host";
+    const char HEADER_X_FORWARDED_FOR[] = "x-forwarded-for";
     const char HEADER_X_FRAME_OPTIONS[] = "x-frame-options";
     const char HEADER_X_XSS_PROTECTION[] = "x-xss-protection";
 
Only in qBittorrent-release-4.2.2/src/base/http: types.h.orig
diff -ur qBittorrent-release-4.2.2.org/src/base/preferences.cpp qBittorrent-release-4.2.2/src/base/preferences.cpp
--- qBittorrent-release-4.2.2.org/src/base/preferences.cpp	2020-03-24 15:39:31.000000000 +0100
+++ qBittorrent-release-4.2.2/src/base/preferences.cpp	2020-04-01 08:08:49.904214765 +0200
@@ -653,6 +653,16 @@
     setValue("Preferences/WebUI/SessionTimeout", timeout);
 }
 
+QString Preferences::getReverseProxyAddress() const
+{
+    return value("Preferences/WebUI/ReverseProxyAddress", "").toString().trimmed();
+}
+
+void Preferences::setReverseProxyAddress(const QString &addr)
+{
+    setValue("Preferences/WebUI/ReverseProxyAddress", addr.trimmed());
+}
+
 bool Preferences::isWebUiClickjackingProtectionEnabled() const
 {
     return value("Preferences/WebUI/ClickjackingProtection", true).toBool();
Only in qBittorrent-release-4.2.2/src/base: preferences.cpp.orig
diff -ur qBittorrent-release-4.2.2.org/src/base/preferences.h qBittorrent-release-4.2.2/src/base/preferences.h
--- qBittorrent-release-4.2.2.org/src/base/preferences.h	2020-03-24 15:39:31.000000000 +0100
+++ qBittorrent-release-4.2.2/src/base/preferences.h	2020-04-01 08:10:06.945868477 +0200
@@ -198,6 +198,8 @@
     void setWebUIMaxAuthFailCount(int count);
     std::chrono::seconds getWebUIBanDuration() const;
     void setWebUIBanDuration(std::chrono::seconds duration);
+    QString getReverseProxyAddress() const;
+    void setReverseProxyAddress(const QString &addr);
     int getWebUISessionTimeout() const;
     void setWebUISessionTimeout(int timeout);
 
Only in qBittorrent-release-4.2.2/src/base: preferences.h.orig
diff -ur qBittorrent-release-4.2.2.org/src/gui/optionsdialog.cpp qBittorrent-release-4.2.2/src/gui/optionsdialog.cpp
--- qBittorrent-release-4.2.2.org/src/gui/optionsdialog.cpp	2020-03-24 15:39:31.000000000 +0100
+++ qBittorrent-release-4.2.2/src/gui/optionsdialog.cpp	2020-04-01 08:10:58.451460695 +0200
@@ -423,6 +423,7 @@
     connect(m_ui->checkBypassAuthSubnetWhitelist, &QAbstractButton::toggled, m_ui->IPSubnetWhitelistButton, &QPushButton::setEnabled);
     connect(m_ui->spinBanCounter, qSpinBoxValueChanged, this, &ThisType::enableApplyButton);
     connect(m_ui->spinBanDuration, qSpinBoxValueChanged, this, &ThisType::enableApplyButton);
+    connect(m_ui->textReverseProxyAddress, &QLineEdit::textChanged, this, &ThisType::enableApplyButton);
     connect(m_ui->spinSessionTimeout, qSpinBoxValueChanged, this, &ThisType::enableApplyButton);
     connect(m_ui->checkClickjacking, &QCheckBox::toggled, this, &ThisType::enableApplyButton);
     connect(m_ui->checkCSRFProtection, &QCheckBox::toggled, this, &ThisType::enableApplyButton);
@@ -781,6 +782,7 @@
             pref->setWebUIPassword(Utils::Password::PBKDF2::generate(webUiPassword()));
         pref->setWebUiLocalAuthEnabled(!m_ui->checkBypassLocalAuth->isChecked());
         pref->setWebUiAuthSubnetWhitelistEnabled(m_ui->checkBypassAuthSubnetWhitelist->isChecked());
+        pref->setReverseProxyAddress(m_ui->textReverseProxyAddress->text());
         // Security
         pref->setWebUiClickjackingProtectionEnabled(m_ui->checkClickjacking->isChecked());
         pref->setWebUiCSRFProtectionEnabled(m_ui->checkCSRFProtection->isChecked());
@@ -1160,6 +1162,7 @@
     m_ui->spinBanCounter->setValue(pref->getWebUIMaxAuthFailCount());
     m_ui->spinBanDuration->setValue(pref->getWebUIBanDuration().count());
     m_ui->spinSessionTimeout->setValue(pref->getWebUISessionTimeout());
+    m_ui->textReverseProxyAddress->setText(pref->getReverseProxyAddress());
 
     // Security
     m_ui->checkClickjacking->setChecked(pref->isWebUiClickjackingProtectionEnabled());
Only in qBittorrent-release-4.2.2/src/gui: optionsdialog.cpp.orig
diff -ur qBittorrent-release-4.2.2.org/src/gui/optionsdialog.ui qBittorrent-release-4.2.2/src/gui/optionsdialog.ui
--- qBittorrent-release-4.2.2.org/src/gui/optionsdialog.ui	2020-03-24 15:39:31.000000000 +0100
+++ qBittorrent-release-4.2.2/src/gui/optionsdialog.ui	2020-04-01 08:08:49.904214765 +0200
@@ -1748,6 +1748,36 @@
              </widget>
             </item>
             <item>
+             <widget class="QGroupBox" name="groupReverseProxy">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="title">
+               <string>Reverse Proxy Server</string>
+              </property>
+              <layout class="QVBoxLayout" name="verticalLayout_33">
+               <item>
+                <layout class="QHBoxLayout" name="horizontalLayout_13">
+                 <item>
+                  <widget class="QLabel" name="lblReverseProxyAddress">
+                   <property name="text">
+                    <string>Reverse Proxy Address:</string>
+                   </property>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class="QLineEdit" name="textReverseProxyAddress">
+                   <property name="toolTip">
+                    <string>Specify reverse proxy IP in order to use forwarded client address (X-Forwarded-For attribute)</string>
+                   </property>
+                  </widget>
+                 </item>
+                </layout>
+               </item>
+              </layout>
+             </widget>
+            </item>
+            <item>
              <widget class="QGroupBox" name="groupIPFilter">
               <property name="title">
                <string>IP Fi&amp;ltering</string>
Only in qBittorrent-release-4.2.2/src/gui: optionsdialog.ui.orig
diff -ur qBittorrent-release-4.2.2.org/src/webui/api/appcontroller.cpp qBittorrent-release-4.2.2/src/webui/api/appcontroller.cpp
--- qBittorrent-release-4.2.2.org/src/webui/api/appcontroller.cpp	2020-03-24 15:39:31.000000000 +0100
+++ qBittorrent-release-4.2.2/src/webui/api/appcontroller.cpp	2020-04-01 08:12:34.083259722 +0200
@@ -234,6 +234,7 @@
     data["bypass_auth_subnet_whitelist"] = authSubnetWhitelistStringList.join("\n");
     data["web_ui_max_auth_fail_count"] = pref->getWebUIMaxAuthFailCount();
     data["web_ui_ban_duration"] = static_cast<int>(pref->getWebUIBanDuration().count());
+    data["reverse_proxy_address"] = pref->getReverseProxyAddress();
     data["web_ui_session_timeout"] = pref->getWebUISessionTimeout();
     // Use alternative Web UI
     data["alternative_webui_enabled"] = pref->isAltWebUiEnabled();
@@ -607,6 +608,8 @@
         pref->setWebUIMaxAuthFailCount(it.value().toInt());
     if (hasKey("web_ui_ban_duration"))
         pref->setWebUIBanDuration(std::chrono::seconds {it.value().toInt()});
+    if (m.contains("reverse_proxy_address"))
+        pref->setReverseProxyAddress(m["reverse_proxy_address"].toString());
     if (hasKey("web_ui_session_timeout"))
         pref->setWebUISessionTimeout(it.value().toInt());
     // Use alternative Web UI
Only in qBittorrent-release-4.2.2/src/webui/api: appcontroller.cpp.orig
diff -ur qBittorrent-release-4.2.2.org/src/webui/www/private/views/preferences.html qBittorrent-release-4.2.2/src/webui/www/private/views/preferences.html
--- qBittorrent-release-4.2.2.org/src/webui/www/private/views/preferences.html	2020-03-24 15:39:31.000000000 +0100
+++ qBittorrent-release-4.2.2/src/webui/www/private/views/preferences.html	2020-04-01 08:08:49.904214765 +0200
@@ -355,6 +355,13 @@
     </fieldset>
 
     <fieldset class="settings">
+        <legend>QBT_TR(Reverse Proxy Server)QBT_TR[CONTEXT=OptionsDialog]</legend>
+        <div class="formRow">
+            <label for="reverse_proxy_address_text" class="leftLabelLarge">QBT_TR(Reverse Proxy Address:)QBT_TR[CONTEXT=OptionsDialog]</label><input type="text" id="reverse_proxy_address_text" />
+        </div>
+    </fieldset>
+
+    <fieldset class="settings">
         <legend>
             <input type="checkbox" id="ipfilter_enabled_checkbox" onclick="qBittorrent.Preferences.updateFilterSettings();" />
             <label for="ipfilter_enabled_checkbox">QBT_TR(IP Filtering)QBT_TR[CONTEXT=OptionsDialog]</label>
@@ -1727,6 +1734,7 @@
                         $('bypass_local_auth_checkbox').setProperty('checked', pref.bypass_local_auth);
                         $('bypass_auth_subnet_whitelist_checkbox').setProperty('checked', pref.bypass_auth_subnet_whitelist_enabled);
                         $('bypass_auth_subnet_whitelist_textarea').setProperty('value', pref.bypass_auth_subnet_whitelist);
+                        $('reverse_proxy_address_text').setProperty('value', pref.reverse_proxy_address);
                         updateBypasssAuthSettings();
                         $('webUIMaxAuthFailCountInput').setProperty('value', pref.web_ui_max_auth_fail_count.toInt());
                         $('webUIBanDurationInput').setProperty('value', pref.web_ui_ban_duration.toInt());
@@ -2096,6 +2104,7 @@
             settings.set('web_ui_max_auth_fail_count', $('webUIMaxAuthFailCountInput').getProperty('value'));
             settings.set('web_ui_ban_duration', $('webUIBanDurationInput').getProperty('value'));
             settings.set('web_ui_session_timeout', $('webUISessionTimeoutInput').getProperty('value'));
+            settings.set('reverse_proxy_address', $('reverse_proxy_address_text').getProperty('value'));
 
             // Use alternative Web UI
             const alternative_webui_enabled = $('use_alt_webui_checkbox').getProperty('checked');
Only in qBittorrent-release-4.2.2/src/webui/www/private/views: preferences.html.orig
